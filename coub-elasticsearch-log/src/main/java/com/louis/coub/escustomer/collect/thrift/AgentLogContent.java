package com.louis.coub.escustomer.collect.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2020-8-27")
public class AgentLogContent implements org.apache.thrift.TBase<AgentLogContent, AgentLogContent._Fields>, java.io.Serializable, Cloneable, Comparable<AgentLogContent> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AgentLogContent");

  private static final org.apache.thrift.protocol.TField PRO_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("proCode", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField APP_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("appCode", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField INST_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("instCode", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField IP_FIELD_DESC = new org.apache.thrift.protocol.TField("ip", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField FILE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fileName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField LOG_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("logList", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField TOTAL_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("totalSize", org.apache.thrift.protocol.TType.I64, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AgentLogContentStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AgentLogContentTupleSchemeFactory());
  }

  public String proCode; // required
  public String appCode; // required
  public String instCode; // optional
  public String ip; // required
  public String fileName; // required
  public List<AgentDataLogInfo> logList; // required
  public long totalSize; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PRO_CODE((short)1, "proCode"),
    APP_CODE((short)2, "appCode"),
    INST_CODE((short)3, "instCode"),
    IP((short)4, "ip"),
    FILE_NAME((short)5, "fileName"),
    LOG_LIST((short)6, "logList"),
    TOTAL_SIZE((short)7, "totalSize");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PRO_CODE
          return PRO_CODE;
        case 2: // APP_CODE
          return APP_CODE;
        case 3: // INST_CODE
          return INST_CODE;
        case 4: // IP
          return IP;
        case 5: // FILE_NAME
          return FILE_NAME;
        case 6: // LOG_LIST
          return LOG_LIST;
        case 7: // TOTAL_SIZE
          return TOTAL_SIZE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TOTALSIZE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.INST_CODE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PRO_CODE, new org.apache.thrift.meta_data.FieldMetaData("proCode", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APP_CODE, new org.apache.thrift.meta_data.FieldMetaData("appCode", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INST_CODE, new org.apache.thrift.meta_data.FieldMetaData("instCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IP, new org.apache.thrift.meta_data.FieldMetaData("ip", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILE_NAME, new org.apache.thrift.meta_data.FieldMetaData("fileName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOG_LIST, new org.apache.thrift.meta_data.FieldMetaData("logList", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "AgentDataLogInfo"))));
    tmpMap.put(_Fields.TOTAL_SIZE, new org.apache.thrift.meta_data.FieldMetaData("totalSize", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AgentLogContent.class, metaDataMap);
  }

  public AgentLogContent() {
  }

  public AgentLogContent(
    String proCode,
    String appCode,
    String ip,
    String fileName,
    List<AgentDataLogInfo> logList,
    long totalSize)
  {
    this();
    this.proCode = proCode;
    this.appCode = appCode;
    this.ip = ip;
    this.fileName = fileName;
    this.logList = logList;
    this.totalSize = totalSize;
    setTotalSizeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AgentLogContent(AgentLogContent other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetProCode()) {
      this.proCode = other.proCode;
    }
    if (other.isSetAppCode()) {
      this.appCode = other.appCode;
    }
    if (other.isSetInstCode()) {
      this.instCode = other.instCode;
    }
    if (other.isSetIp()) {
      this.ip = other.ip;
    }
    if (other.isSetFileName()) {
      this.fileName = other.fileName;
    }
    if (other.isSetLogList()) {
      List<AgentDataLogInfo> __this__logList = new ArrayList<AgentDataLogInfo>(other.logList.size());
      for (AgentDataLogInfo other_element : other.logList) {
        __this__logList.add(other_element);
      }
      this.logList = __this__logList;
    }
    this.totalSize = other.totalSize;
  }

  public AgentLogContent deepCopy() {
    return new AgentLogContent(this);
  }

  @Override
  public void clear() {
    this.proCode = null;
    this.appCode = null;
    this.instCode = null;
    this.ip = null;
    this.fileName = null;
    this.logList = null;
    setTotalSizeIsSet(false);
    this.totalSize = 0;
  }

  public String getProCode() {
    return this.proCode;
  }

  public AgentLogContent setProCode(String proCode) {
    this.proCode = proCode;
    return this;
  }

  public void unsetProCode() {
    this.proCode = null;
  }

  /** Returns true if field proCode is set (has been assigned a value) and false otherwise */
  public boolean isSetProCode() {
    return this.proCode != null;
  }

  public void setProCodeIsSet(boolean value) {
    if (!value) {
      this.proCode = null;
    }
  }

  public String getAppCode() {
    return this.appCode;
  }

  public AgentLogContent setAppCode(String appCode) {
    this.appCode = appCode;
    return this;
  }

  public void unsetAppCode() {
    this.appCode = null;
  }

  /** Returns true if field appCode is set (has been assigned a value) and false otherwise */
  public boolean isSetAppCode() {
    return this.appCode != null;
  }

  public void setAppCodeIsSet(boolean value) {
    if (!value) {
      this.appCode = null;
    }
  }

  public String getInstCode() {
    return this.instCode;
  }

  public AgentLogContent setInstCode(String instCode) {
    this.instCode = instCode;
    return this;
  }

  public void unsetInstCode() {
    this.instCode = null;
  }

  /** Returns true if field instCode is set (has been assigned a value) and false otherwise */
  public boolean isSetInstCode() {
    return this.instCode != null;
  }

  public void setInstCodeIsSet(boolean value) {
    if (!value) {
      this.instCode = null;
    }
  }

  public String getIp() {
    return this.ip;
  }

  public AgentLogContent setIp(String ip) {
    this.ip = ip;
    return this;
  }

  public void unsetIp() {
    this.ip = null;
  }

  /** Returns true if field ip is set (has been assigned a value) and false otherwise */
  public boolean isSetIp() {
    return this.ip != null;
  }

  public void setIpIsSet(boolean value) {
    if (!value) {
      this.ip = null;
    }
  }

  public String getFileName() {
    return this.fileName;
  }

  public AgentLogContent setFileName(String fileName) {
    this.fileName = fileName;
    return this;
  }

  public void unsetFileName() {
    this.fileName = null;
  }

  /** Returns true if field fileName is set (has been assigned a value) and false otherwise */
  public boolean isSetFileName() {
    return this.fileName != null;
  }

  public void setFileNameIsSet(boolean value) {
    if (!value) {
      this.fileName = null;
    }
  }

  public int getLogListSize() {
    return (this.logList == null) ? 0 : this.logList.size();
  }

  public java.util.Iterator<AgentDataLogInfo> getLogListIterator() {
    return (this.logList == null) ? null : this.logList.iterator();
  }

  public void addToLogList(AgentDataLogInfo elem) {
    if (this.logList == null) {
      this.logList = new ArrayList<AgentDataLogInfo>();
    }
    this.logList.add(elem);
  }

  public List<AgentDataLogInfo> getLogList() {
    return this.logList;
  }

  public AgentLogContent setLogList(List<AgentDataLogInfo> logList) {
    this.logList = logList;
    return this;
  }

  public void unsetLogList() {
    this.logList = null;
  }

  /** Returns true if field logList is set (has been assigned a value) and false otherwise */
  public boolean isSetLogList() {
    return this.logList != null;
  }

  public void setLogListIsSet(boolean value) {
    if (!value) {
      this.logList = null;
    }
  }

  public long getTotalSize() {
    return this.totalSize;
  }

  public AgentLogContent setTotalSize(long totalSize) {
    this.totalSize = totalSize;
    setTotalSizeIsSet(true);
    return this;
  }

  public void unsetTotalSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALSIZE_ISSET_ID);
  }

  /** Returns true if field totalSize is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalSize() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALSIZE_ISSET_ID);
  }

  public void setTotalSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALSIZE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PRO_CODE:
      if (value == null) {
        unsetProCode();
      } else {
        setProCode((String)value);
      }
      break;

    case APP_CODE:
      if (value == null) {
        unsetAppCode();
      } else {
        setAppCode((String)value);
      }
      break;

    case INST_CODE:
      if (value == null) {
        unsetInstCode();
      } else {
        setInstCode((String)value);
      }
      break;

    case IP:
      if (value == null) {
        unsetIp();
      } else {
        setIp((String)value);
      }
      break;

    case FILE_NAME:
      if (value == null) {
        unsetFileName();
      } else {
        setFileName((String)value);
      }
      break;

    case LOG_LIST:
      if (value == null) {
        unsetLogList();
      } else {
        setLogList((List<AgentDataLogInfo>)value);
      }
      break;

    case TOTAL_SIZE:
      if (value == null) {
        unsetTotalSize();
      } else {
        setTotalSize((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PRO_CODE:
      return getProCode();

    case APP_CODE:
      return getAppCode();

    case INST_CODE:
      return getInstCode();

    case IP:
      return getIp();

    case FILE_NAME:
      return getFileName();

    case LOG_LIST:
      return getLogList();

    case TOTAL_SIZE:
      return Long.valueOf(getTotalSize());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PRO_CODE:
      return isSetProCode();
    case APP_CODE:
      return isSetAppCode();
    case INST_CODE:
      return isSetInstCode();
    case IP:
      return isSetIp();
    case FILE_NAME:
      return isSetFileName();
    case LOG_LIST:
      return isSetLogList();
    case TOTAL_SIZE:
      return isSetTotalSize();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AgentLogContent)
      return this.equals((AgentLogContent)that);
    return false;
  }

  public boolean equals(AgentLogContent that) {
    if (that == null)
      return false;

    boolean this_present_proCode = true && this.isSetProCode();
    boolean that_present_proCode = true && that.isSetProCode();
    if (this_present_proCode || that_present_proCode) {
      if (!(this_present_proCode && that_present_proCode))
        return false;
      if (!this.proCode.equals(that.proCode))
        return false;
    }

    boolean this_present_appCode = true && this.isSetAppCode();
    boolean that_present_appCode = true && that.isSetAppCode();
    if (this_present_appCode || that_present_appCode) {
      if (!(this_present_appCode && that_present_appCode))
        return false;
      if (!this.appCode.equals(that.appCode))
        return false;
    }

    boolean this_present_instCode = true && this.isSetInstCode();
    boolean that_present_instCode = true && that.isSetInstCode();
    if (this_present_instCode || that_present_instCode) {
      if (!(this_present_instCode && that_present_instCode))
        return false;
      if (!this.instCode.equals(that.instCode))
        return false;
    }

    boolean this_present_ip = true && this.isSetIp();
    boolean that_present_ip = true && that.isSetIp();
    if (this_present_ip || that_present_ip) {
      if (!(this_present_ip && that_present_ip))
        return false;
      if (!this.ip.equals(that.ip))
        return false;
    }

    boolean this_present_fileName = true && this.isSetFileName();
    boolean that_present_fileName = true && that.isSetFileName();
    if (this_present_fileName || that_present_fileName) {
      if (!(this_present_fileName && that_present_fileName))
        return false;
      if (!this.fileName.equals(that.fileName))
        return false;
    }

    boolean this_present_logList = true && this.isSetLogList();
    boolean that_present_logList = true && that.isSetLogList();
    if (this_present_logList || that_present_logList) {
      if (!(this_present_logList && that_present_logList))
        return false;
      if (!this.logList.equals(that.logList))
        return false;
    }

    boolean this_present_totalSize = true;
    boolean that_present_totalSize = true;
    if (this_present_totalSize || that_present_totalSize) {
      if (!(this_present_totalSize && that_present_totalSize))
        return false;
      if (this.totalSize != that.totalSize)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_proCode = true && (isSetProCode());
    list.add(present_proCode);
    if (present_proCode)
      list.add(proCode);

    boolean present_appCode = true && (isSetAppCode());
    list.add(present_appCode);
    if (present_appCode)
      list.add(appCode);

    boolean present_instCode = true && (isSetInstCode());
    list.add(present_instCode);
    if (present_instCode)
      list.add(instCode);

    boolean present_ip = true && (isSetIp());
    list.add(present_ip);
    if (present_ip)
      list.add(ip);

    boolean present_fileName = true && (isSetFileName());
    list.add(present_fileName);
    if (present_fileName)
      list.add(fileName);

    boolean present_logList = true && (isSetLogList());
    list.add(present_logList);
    if (present_logList)
      list.add(logList);

    boolean present_totalSize = true;
    list.add(present_totalSize);
    if (present_totalSize)
      list.add(totalSize);

    return list.hashCode();
  }

  @Override
  public int compareTo(AgentLogContent other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetProCode()).compareTo(other.isSetProCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.proCode, other.proCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppCode()).compareTo(other.isSetAppCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appCode, other.appCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInstCode()).compareTo(other.isSetInstCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instCode, other.instCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIp()).compareTo(other.isSetIp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ip, other.ip);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileName()).compareTo(other.isSetFileName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileName, other.fileName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLogList()).compareTo(other.isSetLogList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLogList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logList, other.logList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalSize()).compareTo(other.isSetTotalSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalSize, other.totalSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AgentLogContent(");
    boolean first = true;

    sb.append("proCode:");
    if (this.proCode == null) {
      sb.append("null");
    } else {
      sb.append(this.proCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("appCode:");
    if (this.appCode == null) {
      sb.append("null");
    } else {
      sb.append(this.appCode);
    }
    first = false;
    if (isSetInstCode()) {
      if (!first) sb.append(", ");
      sb.append("instCode:");
      if (this.instCode == null) {
        sb.append("null");
      } else {
        sb.append(this.instCode);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("ip:");
    if (this.ip == null) {
      sb.append("null");
    } else {
      sb.append(this.ip);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileName:");
    if (this.fileName == null) {
      sb.append("null");
    } else {
      sb.append(this.fileName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("logList:");
    if (this.logList == null) {
      sb.append("null");
    } else {
      sb.append(this.logList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalSize:");
    sb.append(this.totalSize);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    if (proCode == null) {
      throw new TProtocolException("Required field 'proCode' was not present! Struct: " + toString());
    }
    if (appCode == null) {
      throw new TProtocolException("Required field 'appCode' was not present! Struct: " + toString());
    }
    if (ip == null) {
      throw new TProtocolException("Required field 'ip' was not present! Struct: " + toString());
    }
    if (fileName == null) {
      throw new TProtocolException("Required field 'fileName' was not present! Struct: " + toString());
    }
    if (logList == null) {
      throw new TProtocolException("Required field 'logList' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'totalSize' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AgentLogContentStandardSchemeFactory implements SchemeFactory {
    public AgentLogContentStandardScheme getScheme() {
      return new AgentLogContentStandardScheme();
    }
  }

  private static class AgentLogContentStandardScheme extends StandardScheme<AgentLogContent> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AgentLogContent struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PRO_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.proCode = iprot.readString();
              struct.setProCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // APP_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.appCode = iprot.readString();
              struct.setAppCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // INST_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.instCode = iprot.readString();
              struct.setInstCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ip = iprot.readString();
              struct.setIpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FILE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fileName = iprot.readString();
              struct.setFileNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // LOG_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list34 = iprot.readListBegin();
                struct.logList = new ArrayList<AgentDataLogInfo>(_list34.size);
                AgentDataLogInfo _elem35;
                for (int _i36 = 0; _i36 < _list34.size; ++_i36)
                {
                  _elem35 = new AgentDataLogInfo();
                  _elem35.read(iprot);
                  struct.logList.add(_elem35);
                }
                iprot.readListEnd();
              }
              struct.setLogListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TOTAL_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.totalSize = iprot.readI64();
              struct.setTotalSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetTotalSize()) {
        throw new TProtocolException("Required field 'totalSize' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AgentLogContent struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.proCode != null) {
        oprot.writeFieldBegin(PRO_CODE_FIELD_DESC);
        oprot.writeString(struct.proCode);
        oprot.writeFieldEnd();
      }
      if (struct.appCode != null) {
        oprot.writeFieldBegin(APP_CODE_FIELD_DESC);
        oprot.writeString(struct.appCode);
        oprot.writeFieldEnd();
      }
      if (struct.instCode != null) {
        if (struct.isSetInstCode()) {
          oprot.writeFieldBegin(INST_CODE_FIELD_DESC);
          oprot.writeString(struct.instCode);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ip != null) {
        oprot.writeFieldBegin(IP_FIELD_DESC);
        oprot.writeString(struct.ip);
        oprot.writeFieldEnd();
      }
      if (struct.fileName != null) {
        oprot.writeFieldBegin(FILE_NAME_FIELD_DESC);
        oprot.writeString(struct.fileName);
        oprot.writeFieldEnd();
      }
      if (struct.logList != null) {
        oprot.writeFieldBegin(LOG_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.logList.size()));
          for (AgentDataLogInfo _iter37 : struct.logList)
          {
            _iter37.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TOTAL_SIZE_FIELD_DESC);
      oprot.writeI64(struct.totalSize);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AgentLogContentTupleSchemeFactory implements SchemeFactory {
    public AgentLogContentTupleScheme getScheme() {
      return new AgentLogContentTupleScheme();
    }
  }

  private static class AgentLogContentTupleScheme extends TupleScheme<AgentLogContent> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AgentLogContent struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.proCode);
      oprot.writeString(struct.appCode);
      oprot.writeString(struct.ip);
      oprot.writeString(struct.fileName);
      {
        oprot.writeI32(struct.logList.size());
        for (AgentDataLogInfo _iter38 : struct.logList)
        {
          _iter38.write(oprot);
        }
      }
      oprot.writeI64(struct.totalSize);
      BitSet optionals = new BitSet();
      if (struct.isSetInstCode()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetInstCode()) {
        oprot.writeString(struct.instCode);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AgentLogContent struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.proCode = iprot.readString();
      struct.setProCodeIsSet(true);
      struct.appCode = iprot.readString();
      struct.setAppCodeIsSet(true);
      struct.ip = iprot.readString();
      struct.setIpIsSet(true);
      struct.fileName = iprot.readString();
      struct.setFileNameIsSet(true);
      {
        org.apache.thrift.protocol.TList _list39 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.logList = new ArrayList<AgentDataLogInfo>(_list39.size);
        AgentDataLogInfo _elem40;
        for (int _i41 = 0; _i41 < _list39.size; ++_i41)
        {
          _elem40 = new AgentDataLogInfo();
          _elem40.read(iprot);
          struct.logList.add(_elem40);
        }
      }
      struct.setLogListIsSet(true);
      struct.totalSize = iprot.readI64();
      struct.setTotalSizeIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.instCode = iprot.readString();
        struct.setInstCodeIsSet(true);
      }
    }
  }

}