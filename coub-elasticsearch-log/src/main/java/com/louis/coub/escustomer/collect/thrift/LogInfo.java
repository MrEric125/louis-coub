package com.louis.coub.escustomer.collect.thrift;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import javax.annotation.Generated;
import java.util.*;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2020-8-27")
public class LogInfo implements org.apache.thrift.TBase<LogInfo, LogInfo._Fields>, java.io.Serializable, Cloneable, Comparable<LogInfo> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LogInfo");

    private static final org.apache.thrift.protocol.TField UNIQUE_IDENT_FIELD_DESC = new org.apache.thrift.protocol.TField("uniqueIdent", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField DATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("dateTime", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("level", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField THREAD_FIELD_DESC = new org.apache.thrift.protocol.TField("thread", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField CLASS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("className", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField ES_FIELD_DESC = new org.apache.thrift.protocol.TField("es", org.apache.thrift.protocol.TType.LIST, (short)6);
    private static final org.apache.thrift.protocol.TField LOG_FIELD_DESC = new org.apache.thrift.protocol.TField("log", org.apache.thrift.protocol.TType.STRING, (short)7);
    private static final org.apache.thrift.protocol.TField TID_FIELD_DESC = new org.apache.thrift.protocol.TField("tid", org.apache.thrift.protocol.TType.STRING, (short)8);
    private static final org.apache.thrift.protocol.TField SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("size", org.apache.thrift.protocol.TType.I64, (short)9);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
        schemes.put(StandardScheme.class, new LogInfoStandardSchemeFactory());
        schemes.put(TupleScheme.class, new LogInfoTupleSchemeFactory());
    }

    public String uniqueIdent; // optional
    public long dateTime; // required
    public String level; // required
    public String thread; // required
    public String className; // required
    public List<String> es; // optional
    public String log; // required
    public String tid; // optional
    public long size; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        UNIQUE_IDENT((short)1, "uniqueIdent"),
        DATE_TIME((short)2, "dateTime"),
        LEVEL((short)3, "level"),
        THREAD((short)4, "thread"),
        CLASS_NAME((short)5, "className"),
        ES((short)6, "es"),
        LOG((short)7, "log"),
        TID((short)8, "tid"),
        SIZE((short)9, "size");

        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static {
            for (_Fields field : EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch(fieldId) {
                case 1: // UNIQUE_IDENT
                    return UNIQUE_IDENT;
                case 2: // DATE_TIME
                    return DATE_TIME;
                case 3: // LEVEL
                    return LEVEL;
                case 4: // THREAD
                    return THREAD;
                case 5: // CLASS_NAME
                    return CLASS_NAME;
                case 6: // ES
                    return ES;
                case 7: // LOG
                    return LOG;
                case 8: // TID
                    return TID;
                case 9: // SIZE
                    return SIZE;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __DATETIME_ISSET_ID = 0;
    private static final int __SIZE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    private static final _Fields optionals[] = {_Fields.UNIQUE_IDENT,_Fields.ES,_Fields.TID};
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
        Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.UNIQUE_IDENT, new org.apache.thrift.meta_data.FieldMetaData("uniqueIdent", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.DATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("dateTime", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        tmpMap.put(_Fields.LEVEL, new org.apache.thrift.meta_data.FieldMetaData("level", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.THREAD, new org.apache.thrift.meta_data.FieldMetaData("thread", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.CLASS_NAME, new org.apache.thrift.meta_data.FieldMetaData("className", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.ES, new org.apache.thrift.meta_data.FieldMetaData("es", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
        tmpMap.put(_Fields.LOG, new org.apache.thrift.meta_data.FieldMetaData("log", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.TID, new org.apache.thrift.meta_data.FieldMetaData("tid", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.SIZE, new org.apache.thrift.meta_data.FieldMetaData("size", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LogInfo.class, metaDataMap);
    }

    public LogInfo() {
    }

    public LogInfo(
            long dateTime,
            String level,
            String thread,
            String className,
            String log,
            long size)
    {
        this();
        this.dateTime = dateTime;
        setDateTimeIsSet(true);
        this.level = level;
        this.thread = thread;
        this.className = className;
        this.log = log;
        this.size = size;
        setSizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public LogInfo(LogInfo other) {
        __isset_bitfield = other.__isset_bitfield;
        if (other.isSetUniqueIdent()) {
            this.uniqueIdent = other.uniqueIdent;
        }
        this.dateTime = other.dateTime;
        if (other.isSetLevel()) {
            this.level = other.level;
        }
        if (other.isSetThread()) {
            this.thread = other.thread;
        }
        if (other.isSetClassName()) {
            this.className = other.className;
        }
        if (other.isSetEs()) {
            List<String> __this__es = new ArrayList<String>(other.es);
            this.es = __this__es;
        }
        if (other.isSetLog()) {
            this.log = other.log;
        }
        if (other.isSetTid()) {
            this.tid = other.tid;
        }
        this.size = other.size;
    }

    public LogInfo deepCopy() {
        return new LogInfo(this);
    }

    @Override
    public void clear() {
        this.uniqueIdent = null;
        setDateTimeIsSet(false);
        this.dateTime = 0;
        this.level = null;
        this.thread = null;
        this.className = null;
        this.es = null;
        this.log = null;
        this.tid = null;
        setSizeIsSet(false);
        this.size = 0;
    }

    public String getUniqueIdent() {
        return this.uniqueIdent;
    }

    public LogInfo setUniqueIdent(String uniqueIdent) {
        this.uniqueIdent = uniqueIdent;
        return this;
    }

    public void unsetUniqueIdent() {
        this.uniqueIdent = null;
    }

    /** Returns true if field uniqueIdent is set (has been assigned a value) and false otherwise */
    public boolean isSetUniqueIdent() {
        return this.uniqueIdent != null;
    }

    public void setUniqueIdentIsSet(boolean value) {
        if (!value) {
            this.uniqueIdent = null;
        }
    }

    public long getDateTime() {
        return this.dateTime;
    }

    public LogInfo setDateTime(long dateTime) {
        this.dateTime = dateTime;
        setDateTimeIsSet(true);
        return this;
    }

    public void unsetDateTime() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DATETIME_ISSET_ID);
    }

    /** Returns true if field dateTime is set (has been assigned a value) and false otherwise */
    public boolean isSetDateTime() {
        return EncodingUtils.testBit(__isset_bitfield, __DATETIME_ISSET_ID);
    }

    public void setDateTimeIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DATETIME_ISSET_ID, value);
    }

    public String getLevel() {
        return this.level;
    }

    public LogInfo setLevel(String level) {
        this.level = level;
        return this;
    }

    public void unsetLevel() {
        this.level = null;
    }

    /** Returns true if field level is set (has been assigned a value) and false otherwise */
    public boolean isSetLevel() {
        return this.level != null;
    }

    public void setLevelIsSet(boolean value) {
        if (!value) {
            this.level = null;
        }
    }

    public String getThread() {
        return this.thread;
    }

    public LogInfo setThread(String thread) {
        this.thread = thread;
        return this;
    }

    public void unsetThread() {
        this.thread = null;
    }

    /** Returns true if field thread is set (has been assigned a value) and false otherwise */
    public boolean isSetThread() {
        return this.thread != null;
    }

    public void setThreadIsSet(boolean value) {
        if (!value) {
            this.thread = null;
        }
    }

    public String getClassName() {
        return this.className;
    }

    public LogInfo setClassName(String className) {
        this.className = className;
        return this;
    }

    public void unsetClassName() {
        this.className = null;
    }

    /** Returns true if field className is set (has been assigned a value) and false otherwise */
    public boolean isSetClassName() {
        return this.className != null;
    }

    public void setClassNameIsSet(boolean value) {
        if (!value) {
            this.className = null;
        }
    }

    public int getEsSize() {
        return (this.es == null) ? 0 : this.es.size();
    }

    public java.util.Iterator<String> getEsIterator() {
        return (this.es == null) ? null : this.es.iterator();
    }

    public void addToEs(String elem) {
        if (this.es == null) {
            this.es = new ArrayList<String>();
        }
        this.es.add(elem);
    }

    public List<String> getEs() {
        return this.es;
    }

    public LogInfo setEs(List<String> es) {
        this.es = es;
        return this;
    }

    public void unsetEs() {
        this.es = null;
    }

    /** Returns true if field es is set (has been assigned a value) and false otherwise */
    public boolean isSetEs() {
        return this.es != null;
    }

    public void setEsIsSet(boolean value) {
        if (!value) {
            this.es = null;
        }
    }

    public String getLog() {
        return this.log;
    }

    public LogInfo setLog(String log) {
        this.log = log;
        return this;
    }

    public void unsetLog() {
        this.log = null;
    }

    /** Returns true if field log is set (has been assigned a value) and false otherwise */
    public boolean isSetLog() {
        return this.log != null;
    }

    public void setLogIsSet(boolean value) {
        if (!value) {
            this.log = null;
        }
    }

    public String getTid() {
        return this.tid;
    }

    public LogInfo setTid(String tid) {
        this.tid = tid;
        return this;
    }

    public void unsetTid() {
        this.tid = null;
    }

    /** Returns true if field tid is set (has been assigned a value) and false otherwise */
    public boolean isSetTid() {
        return this.tid != null;
    }

    public void setTidIsSet(boolean value) {
        if (!value) {
            this.tid = null;
        }
    }

    public long getSize() {
        return this.size;
    }

    public LogInfo setSize(long size) {
        this.size = size;
        setSizeIsSet(true);
        return this;
    }

    public void unsetSize() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SIZE_ISSET_ID);
    }

    /** Returns true if field size is set (has been assigned a value) and false otherwise */
    public boolean isSetSize() {
        return EncodingUtils.testBit(__isset_bitfield, __SIZE_ISSET_ID);
    }

    public void setSizeIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
            case UNIQUE_IDENT:
                if (value == null) {
                    unsetUniqueIdent();
                } else {
                    setUniqueIdent((String)value);
                }
                break;

            case DATE_TIME:
                if (value == null) {
                    unsetDateTime();
                } else {
                    setDateTime((Long)value);
                }
                break;

            case LEVEL:
                if (value == null) {
                    unsetLevel();
                } else {
                    setLevel((String)value);
                }
                break;

            case THREAD:
                if (value == null) {
                    unsetThread();
                } else {
                    setThread((String)value);
                }
                break;

            case CLASS_NAME:
                if (value == null) {
                    unsetClassName();
                } else {
                    setClassName((String)value);
                }
                break;

            case ES:
                if (value == null) {
                    unsetEs();
                } else {
                    setEs((List<String>)value);
                }
                break;

            case LOG:
                if (value == null) {
                    unsetLog();
                } else {
                    setLog((String)value);
                }
                break;

            case TID:
                if (value == null) {
                    unsetTid();
                } else {
                    setTid((String)value);
                }
                break;

            case SIZE:
                if (value == null) {
                    unsetSize();
                } else {
                    setSize((Long)value);
                }
                break;

        }
    }

    public Object getFieldValue(_Fields field) {
        switch (field) {
            case UNIQUE_IDENT:
                return getUniqueIdent();

            case DATE_TIME:
                return Long.valueOf(getDateTime());

            case LEVEL:
                return getLevel();

            case THREAD:
                return getThread();

            case CLASS_NAME:
                return getClassName();

            case ES:
                return getEs();

            case LOG:
                return getLog();

            case TID:
                return getTid();

            case SIZE:
                return Long.valueOf(getSize());

        }
        throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
            case UNIQUE_IDENT:
                return isSetUniqueIdent();
            case DATE_TIME:
                return isSetDateTime();
            case LEVEL:
                return isSetLevel();
            case THREAD:
                return isSetThread();
            case CLASS_NAME:
                return isSetClassName();
            case ES:
                return isSetEs();
            case LOG:
                return isSetLog();
            case TID:
                return isSetTid();
            case SIZE:
                return isSetSize();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof LogInfo)
            return this.equals((LogInfo)that);
        return false;
    }

    public boolean equals(LogInfo that) {
        if (that == null)
            return false;

        boolean this_present_uniqueIdent = true && this.isSetUniqueIdent();
        boolean that_present_uniqueIdent = true && that.isSetUniqueIdent();
        if (this_present_uniqueIdent || that_present_uniqueIdent) {
            if (!(this_present_uniqueIdent && that_present_uniqueIdent))
                return false;
            if (!this.uniqueIdent.equals(that.uniqueIdent))
                return false;
        }

        boolean this_present_dateTime = true;
        boolean that_present_dateTime = true;
        if (this_present_dateTime || that_present_dateTime) {
            if (!(this_present_dateTime && that_present_dateTime))
                return false;
            if (this.dateTime != that.dateTime)
                return false;
        }

        boolean this_present_level = true && this.isSetLevel();
        boolean that_present_level = true && that.isSetLevel();
        if (this_present_level || that_present_level) {
            if (!(this_present_level && that_present_level))
                return false;
            if (!this.level.equals(that.level))
                return false;
        }

        boolean this_present_thread = true && this.isSetThread();
        boolean that_present_thread = true && that.isSetThread();
        if (this_present_thread || that_present_thread) {
            if (!(this_present_thread && that_present_thread))
                return false;
            if (!this.thread.equals(that.thread))
                return false;
        }

        boolean this_present_className = true && this.isSetClassName();
        boolean that_present_className = true && that.isSetClassName();
        if (this_present_className || that_present_className) {
            if (!(this_present_className && that_present_className))
                return false;
            if (!this.className.equals(that.className))
                return false;
        }

        boolean this_present_es = true && this.isSetEs();
        boolean that_present_es = true && that.isSetEs();
        if (this_present_es || that_present_es) {
            if (!(this_present_es && that_present_es))
                return false;
            if (!this.es.equals(that.es))
                return false;
        }

        boolean this_present_log = true && this.isSetLog();
        boolean that_present_log = true && that.isSetLog();
        if (this_present_log || that_present_log) {
            if (!(this_present_log && that_present_log))
                return false;
            if (!this.log.equals(that.log))
                return false;
        }

        boolean this_present_tid = true && this.isSetTid();
        boolean that_present_tid = true && that.isSetTid();
        if (this_present_tid || that_present_tid) {
            if (!(this_present_tid && that_present_tid))
                return false;
            if (!this.tid.equals(that.tid))
                return false;
        }

        boolean this_present_size = true;
        boolean that_present_size = true;
        if (this_present_size || that_present_size) {
            if (!(this_present_size && that_present_size))
                return false;
            if (this.size != that.size)
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        List<Object> list = new ArrayList<Object>();

        boolean present_uniqueIdent = true && (isSetUniqueIdent());
        list.add(present_uniqueIdent);
        if (present_uniqueIdent)
            list.add(uniqueIdent);

        boolean present_dateTime = true;
        list.add(present_dateTime);
        if (present_dateTime)
            list.add(dateTime);

        boolean present_level = true && (isSetLevel());
        list.add(present_level);
        if (present_level)
            list.add(level);

        boolean present_thread = true && (isSetThread());
        list.add(present_thread);
        if (present_thread)
            list.add(thread);

        boolean present_className = true && (isSetClassName());
        list.add(present_className);
        if (present_className)
            list.add(className);

        boolean present_es = true && (isSetEs());
        list.add(present_es);
        if (present_es)
            list.add(es);

        boolean present_log = true && (isSetLog());
        list.add(present_log);
        if (present_log)
            list.add(log);

        boolean present_tid = true && (isSetTid());
        list.add(present_tid);
        if (present_tid)
            list.add(tid);

        boolean present_size = true;
        list.add(present_size);
        if (present_size)
            list.add(size);

        return list.hashCode();
    }

    @Override
    public int compareTo(LogInfo other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = Boolean.valueOf(isSetUniqueIdent()).compareTo(other.isSetUniqueIdent());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetUniqueIdent()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uniqueIdent, other.uniqueIdent);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetDateTime()).compareTo(other.isSetDateTime());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetDateTime()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dateTime, other.dateTime);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetLevel()).compareTo(other.isSetLevel());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetLevel()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.level, other.level);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetThread()).compareTo(other.isSetThread());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetThread()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.thread, other.thread);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetClassName()).compareTo(other.isSetClassName());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetClassName()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.className, other.className);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetEs()).compareTo(other.isSetEs());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetEs()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.es, other.es);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetLog()).compareTo(other.isSetLog());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetLog()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.log, other.log);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetTid()).compareTo(other.isSetTid());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetTid()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tid, other.tid);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetSize()).compareTo(other.isSetSize());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetSize()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.size, other.size);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
        schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
        schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("LogInfo(");
        boolean first = true;

        if (isSetUniqueIdent()) {
            sb.append("uniqueIdent:");
            if (this.uniqueIdent == null) {
                sb.append("null");
            } else {
                sb.append(this.uniqueIdent);
            }
            first = false;
        }
        if (!first) sb.append(", ");
        sb.append("dateTime:");
        sb.append(this.dateTime);
        first = false;
        if (!first) sb.append(", ");
        sb.append("level:");
        if (this.level == null) {
            sb.append("null");
        } else {
            sb.append(this.level);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("thread:");
        if (this.thread == null) {
            sb.append("null");
        } else {
            sb.append(this.thread);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("className:");
        if (this.className == null) {
            sb.append("null");
        } else {
            sb.append(this.className);
        }
        first = false;
        if (isSetEs()) {
            if (!first) sb.append(", ");
            sb.append("es:");
            if (this.es == null) {
                sb.append("null");
            } else {
                sb.append(this.es);
            }
            first = false;
        }
        if (!first) sb.append(", ");
        sb.append("log:");
        if (this.log == null) {
            sb.append("null");
        } else {
            sb.append(this.log);
        }
        first = false;
        if (isSetTid()) {
            if (!first) sb.append(", ");
            sb.append("tid:");
            if (this.tid == null) {
                sb.append("null");
            } else {
                sb.append(this.tid);
            }
            first = false;
        }
        if (!first) sb.append(", ");
        sb.append("size:");
        sb.append(this.size);
        first = false;
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws TException {
        // check for required fields
        // alas, we cannot check 'dateTime' because it's a primitive and you chose the non-beans generator.
        if (level == null) {
            throw new TProtocolException("Required field 'level' was not present! Struct: " + toString());
        }
        if (thread == null) {
            throw new TProtocolException("Required field 'thread' was not present! Struct: " + toString());
        }
        if (className == null) {
            throw new TProtocolException("Required field 'className' was not present! Struct: " + toString());
        }
        if (log == null) {
            throw new TProtocolException("Required field 'log' was not present! Struct: " + toString());
        }
        // alas, we cannot check 'size' because it's a primitive and you chose the non-beans generator.
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class LogInfoStandardSchemeFactory implements SchemeFactory {
        public LogInfoStandardScheme getScheme() {
            return new LogInfoStandardScheme();
        }
    }

    private static class LogInfoStandardScheme extends StandardScheme<LogInfo> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, LogInfo struct) throws TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true)
            {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // UNIQUE_IDENT
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.uniqueIdent = iprot.readString();
                            struct.setUniqueIdentIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // DATE_TIME
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.dateTime = iprot.readI64();
                            struct.setDateTimeIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // LEVEL
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.level = iprot.readString();
                            struct.setLevelIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 4: // THREAD
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.thread = iprot.readString();
                            struct.setThreadIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 5: // CLASS_NAME
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.className = iprot.readString();
                            struct.setClassNameIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 6: // ES
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list18 = iprot.readListBegin();
                                struct.es = new ArrayList<String>(_list18.size);
                                String _elem19;
                                for (int _i20 = 0; _i20 < _list18.size; ++_i20)
                                {
                                    _elem19 = iprot.readString();
                                    struct.es.add(_elem19);
                                }
                                iprot.readListEnd();
                            }
                            struct.setEsIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 7: // LOG
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.log = iprot.readString();
                            struct.setLogIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 8: // TID
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.tid = iprot.readString();
                            struct.setTidIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 9: // SIZE
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.size = iprot.readI64();
                            struct.setSizeIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            if (!struct.isSetDateTime()) {
                throw new TProtocolException("Required field 'dateTime' was not found in serialized data! Struct: " + toString());
            }
            if (!struct.isSetSize()) {
                throw new TProtocolException("Required field 'size' was not found in serialized data! Struct: " + toString());
            }
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, LogInfo struct) throws TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.uniqueIdent != null) {
                if (struct.isSetUniqueIdent()) {
                    oprot.writeFieldBegin(UNIQUE_IDENT_FIELD_DESC);
                    oprot.writeString(struct.uniqueIdent);
                    oprot.writeFieldEnd();
                }
            }
            oprot.writeFieldBegin(DATE_TIME_FIELD_DESC);
            oprot.writeI64(struct.dateTime);
            oprot.writeFieldEnd();
            if (struct.level != null) {
                oprot.writeFieldBegin(LEVEL_FIELD_DESC);
                oprot.writeString(struct.level);
                oprot.writeFieldEnd();
            }
            if (struct.thread != null) {
                oprot.writeFieldBegin(THREAD_FIELD_DESC);
                oprot.writeString(struct.thread);
                oprot.writeFieldEnd();
            }
            if (struct.className != null) {
                oprot.writeFieldBegin(CLASS_NAME_FIELD_DESC);
                oprot.writeString(struct.className);
                oprot.writeFieldEnd();
            }
            if (struct.es != null) {
                if (struct.isSetEs()) {
                    oprot.writeFieldBegin(ES_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.es.size()));
                        for (String _iter21 : struct.es)
                        {
                            oprot.writeString(_iter21);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
            }
            if (struct.log != null) {
                oprot.writeFieldBegin(LOG_FIELD_DESC);
                oprot.writeString(struct.log);
                oprot.writeFieldEnd();
            }
            if (struct.tid != null) {
                if (struct.isSetTid()) {
                    oprot.writeFieldBegin(TID_FIELD_DESC);
                    oprot.writeString(struct.tid);
                    oprot.writeFieldEnd();
                }
            }
            oprot.writeFieldBegin(SIZE_FIELD_DESC);
            oprot.writeI64(struct.size);
            oprot.writeFieldEnd();
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class LogInfoTupleSchemeFactory implements SchemeFactory {
        public LogInfoTupleScheme getScheme() {
            return new LogInfoTupleScheme();
        }
    }

    private static class LogInfoTupleScheme extends TupleScheme<LogInfo> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, LogInfo struct) throws TException {
            TTupleProtocol oprot = (TTupleProtocol) prot;
            oprot.writeI64(struct.dateTime);
            oprot.writeString(struct.level);
            oprot.writeString(struct.thread);
            oprot.writeString(struct.className);
            oprot.writeString(struct.log);
            oprot.writeI64(struct.size);
            BitSet optionals = new BitSet();
            if (struct.isSetUniqueIdent()) {
                optionals.set(0);
            }
            if (struct.isSetEs()) {
                optionals.set(1);
            }
            if (struct.isSetTid()) {
                optionals.set(2);
            }
            oprot.writeBitSet(optionals, 3);
            if (struct.isSetUniqueIdent()) {
                oprot.writeString(struct.uniqueIdent);
            }
            if (struct.isSetEs()) {
                {
                    oprot.writeI32(struct.es.size());
                    for (String _iter22 : struct.es)
                    {
                        oprot.writeString(_iter22);
                    }
                }
            }
            if (struct.isSetTid()) {
                oprot.writeString(struct.tid);
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, LogInfo struct) throws TException {
            TTupleProtocol iprot = (TTupleProtocol) prot;
            struct.dateTime = iprot.readI64();
            struct.setDateTimeIsSet(true);
            struct.level = iprot.readString();
            struct.setLevelIsSet(true);
            struct.thread = iprot.readString();
            struct.setThreadIsSet(true);
            struct.className = iprot.readString();
            struct.setClassNameIsSet(true);
            struct.log = iprot.readString();
            struct.setLogIsSet(true);
            struct.size = iprot.readI64();
            struct.setSizeIsSet(true);
            BitSet incoming = iprot.readBitSet(3);
            if (incoming.get(0)) {
                struct.uniqueIdent = iprot.readString();
                struct.setUniqueIdentIsSet(true);
            }
            if (incoming.get(1)) {
                {
                    org.apache.thrift.protocol.TList _list23 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                    struct.es = new ArrayList<String>(_list23.size);
                    String _elem24;
                    for (int _i25 = 0; _i25 < _list23.size; ++_i25)
                    {
                        _elem24 = iprot.readString();
                        struct.es.add(_elem24);
                    }
                }
                struct.setEsIsSet(true);
            }
            if (incoming.get(2)) {
                struct.tid = iprot.readString();
                struct.setTidIsSet(true);
            }
        }
    }

}
