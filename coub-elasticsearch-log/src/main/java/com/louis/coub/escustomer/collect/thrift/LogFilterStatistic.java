package com.louis.coub.escustomer.collect.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import javax.annotation.Generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2020-8-27")
public class LogFilterStatistic implements org.apache.thrift.TBase<LogFilterStatistic, LogFilterStatistic._Fields>, java.io.Serializable, Cloneable, Comparable<LogFilterStatistic> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LogFilterStatistic");

    private static final org.apache.thrift.protocol.TField PRO_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("proCode", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField APP_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("appCode", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField INST_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("instCode", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField IP_FIELD_DESC = new org.apache.thrift.protocol.TField("ip", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField DATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("dateTime", org.apache.thrift.protocol.TType.I64, (short)5);
    private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.MAP, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
        schemes.put(StandardScheme.class, new LogFilterStatisticStandardSchemeFactory());
        schemes.put(TupleScheme.class, new LogFilterStatisticTupleSchemeFactory());
    }

    public String proCode; // required
    public String appCode; // required
    public String instCode; // optional
    public String ip; // required
    public long dateTime; // required
    public Map<String,Integer> data; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        PRO_CODE((short)1, "proCode"),
        APP_CODE((short)2, "appCode"),
        INST_CODE((short)3, "instCode"),
        IP((short)4, "ip"),
        DATE_TIME((short)5, "dateTime"),
        DATA((short)6, "data");

        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static {
            for (_Fields field : EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch(fieldId) {
                case 1: // PRO_CODE
                    return PRO_CODE;
                case 2: // APP_CODE
                    return APP_CODE;
                case 3: // INST_CODE
                    return INST_CODE;
                case 4: // IP
                    return IP;
                case 5: // DATE_TIME
                    return DATE_TIME;
                case 6: // DATA
                    return DATA;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __DATETIME_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    private static final _Fields optionals[] = {_Fields.INST_CODE};
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
        Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.PRO_CODE, new org.apache.thrift.meta_data.FieldMetaData("proCode", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.APP_CODE, new org.apache.thrift.meta_data.FieldMetaData("appCode", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.INST_CODE, new org.apache.thrift.meta_data.FieldMetaData("instCode", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.IP, new org.apache.thrift.meta_data.FieldMetaData("ip", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.DATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("dateTime", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LogFilterStatistic.class, metaDataMap);
    }

    public LogFilterStatistic() {
    }

    public LogFilterStatistic(
            String proCode,
            String appCode,
            String ip,
            long dateTime,
            Map<String,Integer> data)
    {
        this();
        this.proCode = proCode;
        this.appCode = appCode;
        this.ip = ip;
        this.dateTime = dateTime;
        setDateTimeIsSet(true);
        this.data = data;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public LogFilterStatistic(LogFilterStatistic other) {
        __isset_bitfield = other.__isset_bitfield;
        if (other.isSetProCode()) {
            this.proCode = other.proCode;
        }
        if (other.isSetAppCode()) {
            this.appCode = other.appCode;
        }
        if (other.isSetInstCode()) {
            this.instCode = other.instCode;
        }
        if (other.isSetIp()) {
            this.ip = other.ip;
        }
        this.dateTime = other.dateTime;
        if (other.isSetData()) {
            Map<String,Integer> __this__data = new HashMap<String,Integer>(other.data);
            this.data = __this__data;
        }
    }

    public LogFilterStatistic deepCopy() {
        return new LogFilterStatistic(this);
    }

    @Override
    public void clear() {
        this.proCode = null;
        this.appCode = null;
        this.instCode = null;
        this.ip = null;
        setDateTimeIsSet(false);
        this.dateTime = 0;
        this.data = null;
    }

    public String getProCode() {
        return this.proCode;
    }

    public LogFilterStatistic setProCode(String proCode) {
        this.proCode = proCode;
        return this;
    }

    public void unsetProCode() {
        this.proCode = null;
    }

    /** Returns true if field proCode is set (has been assigned a value) and false otherwise */
    public boolean isSetProCode() {
        return this.proCode != null;
    }

    public void setProCodeIsSet(boolean value) {
        if (!value) {
            this.proCode = null;
        }
    }

    public String getAppCode() {
        return this.appCode;
    }

    public LogFilterStatistic setAppCode(String appCode) {
        this.appCode = appCode;
        return this;
    }

    public void unsetAppCode() {
        this.appCode = null;
    }

    /** Returns true if field appCode is set (has been assigned a value) and false otherwise */
    public boolean isSetAppCode() {
        return this.appCode != null;
    }

    public void setAppCodeIsSet(boolean value) {
        if (!value) {
            this.appCode = null;
        }
    }

    public String getInstCode() {
        return this.instCode;
    }

    public LogFilterStatistic setInstCode(String instCode) {
        this.instCode = instCode;
        return this;
    }

    public void unsetInstCode() {
        this.instCode = null;
    }

    /** Returns true if field instCode is set (has been assigned a value) and false otherwise */
    public boolean isSetInstCode() {
        return this.instCode != null;
    }

    public void setInstCodeIsSet(boolean value) {
        if (!value) {
            this.instCode = null;
        }
    }

    public String getIp() {
        return this.ip;
    }

    public LogFilterStatistic setIp(String ip) {
        this.ip = ip;
        return this;
    }

    public void unsetIp() {
        this.ip = null;
    }

    /** Returns true if field ip is set (has been assigned a value) and false otherwise */
    public boolean isSetIp() {
        return this.ip != null;
    }

    public void setIpIsSet(boolean value) {
        if (!value) {
            this.ip = null;
        }
    }

    public long getDateTime() {
        return this.dateTime;
    }

    public LogFilterStatistic setDateTime(long dateTime) {
        this.dateTime = dateTime;
        setDateTimeIsSet(true);
        return this;
    }

    public void unsetDateTime() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DATETIME_ISSET_ID);
    }

    /** Returns true if field dateTime is set (has been assigned a value) and false otherwise */
    public boolean isSetDateTime() {
        return EncodingUtils.testBit(__isset_bitfield, __DATETIME_ISSET_ID);
    }

    public void setDateTimeIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DATETIME_ISSET_ID, value);
    }

    public int getDataSize() {
        return (this.data == null) ? 0 : this.data.size();
    }

    public void putToData(String key, int val) {
        if (this.data == null) {
            this.data = new HashMap<String,Integer>();
        }
        this.data.put(key, val);
    }

    public Map<String,Integer> getData() {
        return this.data;
    }

    public LogFilterStatistic setData(Map<String,Integer> data) {
        this.data = data;
        return this;
    }

    public void unsetData() {
        this.data = null;
    }

    /** Returns true if field data is set (has been assigned a value) and false otherwise */
    public boolean isSetData() {
        return this.data != null;
    }

    public void setDataIsSet(boolean value) {
        if (!value) {
            this.data = null;
        }
    }

    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
            case PRO_CODE:
                if (value == null) {
                    unsetProCode();
                } else {
                    setProCode((String)value);
                }
                break;

            case APP_CODE:
                if (value == null) {
                    unsetAppCode();
                } else {
                    setAppCode((String)value);
                }
                break;

            case INST_CODE:
                if (value == null) {
                    unsetInstCode();
                } else {
                    setInstCode((String)value);
                }
                break;

            case IP:
                if (value == null) {
                    unsetIp();
                } else {
                    setIp((String)value);
                }
                break;

            case DATE_TIME:
                if (value == null) {
                    unsetDateTime();
                } else {
                    setDateTime((Long)value);
                }
                break;

            case DATA:
                if (value == null) {
                    unsetData();
                } else {
                    setData((Map<String,Integer>)value);
                }
                break;

        }
    }

    public Object getFieldValue(_Fields field) {
        switch (field) {
            case PRO_CODE:
                return getProCode();

            case APP_CODE:
                return getAppCode();

            case INST_CODE:
                return getInstCode();

            case IP:
                return getIp();

            case DATE_TIME:
                return Long.valueOf(getDateTime());

            case DATA:
                return getData();

        }
        throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
            case PRO_CODE:
                return isSetProCode();
            case APP_CODE:
                return isSetAppCode();
            case INST_CODE:
                return isSetInstCode();
            case IP:
                return isSetIp();
            case DATE_TIME:
                return isSetDateTime();
            case DATA:
                return isSetData();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof LogFilterStatistic)
            return this.equals((LogFilterStatistic)that);
        return false;
    }

    public boolean equals(LogFilterStatistic that) {
        if (that == null)
            return false;

        boolean this_present_proCode = true && this.isSetProCode();
        boolean that_present_proCode = true && that.isSetProCode();
        if (this_present_proCode || that_present_proCode) {
            if (!(this_present_proCode && that_present_proCode))
                return false;
            if (!this.proCode.equals(that.proCode))
                return false;
        }

        boolean this_present_appCode = true && this.isSetAppCode();
        boolean that_present_appCode = true && that.isSetAppCode();
        if (this_present_appCode || that_present_appCode) {
            if (!(this_present_appCode && that_present_appCode))
                return false;
            if (!this.appCode.equals(that.appCode))
                return false;
        }

        boolean this_present_instCode = true && this.isSetInstCode();
        boolean that_present_instCode = true && that.isSetInstCode();
        if (this_present_instCode || that_present_instCode) {
            if (!(this_present_instCode && that_present_instCode))
                return false;
            if (!this.instCode.equals(that.instCode))
                return false;
        }

        boolean this_present_ip = true && this.isSetIp();
        boolean that_present_ip = true && that.isSetIp();
        if (this_present_ip || that_present_ip) {
            if (!(this_present_ip && that_present_ip))
                return false;
            if (!this.ip.equals(that.ip))
                return false;
        }

        boolean this_present_dateTime = true;
        boolean that_present_dateTime = true;
        if (this_present_dateTime || that_present_dateTime) {
            if (!(this_present_dateTime && that_present_dateTime))
                return false;
            if (this.dateTime != that.dateTime)
                return false;
        }

        boolean this_present_data = true && this.isSetData();
        boolean that_present_data = true && that.isSetData();
        if (this_present_data || that_present_data) {
            if (!(this_present_data && that_present_data))
                return false;
            if (!this.data.equals(that.data))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        List<Object> list = new ArrayList<Object>();

        boolean present_proCode = true && (isSetProCode());
        list.add(present_proCode);
        if (present_proCode)
            list.add(proCode);

        boolean present_appCode = true && (isSetAppCode());
        list.add(present_appCode);
        if (present_appCode)
            list.add(appCode);

        boolean present_instCode = true && (isSetInstCode());
        list.add(present_instCode);
        if (present_instCode)
            list.add(instCode);

        boolean present_ip = true && (isSetIp());
        list.add(present_ip);
        if (present_ip)
            list.add(ip);

        boolean present_dateTime = true;
        list.add(present_dateTime);
        if (present_dateTime)
            list.add(dateTime);

        boolean present_data = true && (isSetData());
        list.add(present_data);
        if (present_data)
            list.add(data);

        return list.hashCode();
    }

    @Override
    public int compareTo(LogFilterStatistic other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = Boolean.valueOf(isSetProCode()).compareTo(other.isSetProCode());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetProCode()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.proCode, other.proCode);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetAppCode()).compareTo(other.isSetAppCode());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetAppCode()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appCode, other.appCode);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetInstCode()).compareTo(other.isSetInstCode());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetInstCode()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instCode, other.instCode);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetIp()).compareTo(other.isSetIp());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetIp()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ip, other.ip);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetDateTime()).compareTo(other.isSetDateTime());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetDateTime()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dateTime, other.dateTime);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetData()).compareTo(other.isSetData());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetData()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, other.data);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
        schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
        schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("LogFilterStatistic(");
        boolean first = true;

        sb.append("proCode:");
        if (this.proCode == null) {
            sb.append("null");
        } else {
            sb.append(this.proCode);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("appCode:");
        if (this.appCode == null) {
            sb.append("null");
        } else {
            sb.append(this.appCode);
        }
        first = false;
        if (isSetInstCode()) {
            if (!first) sb.append(", ");
            sb.append("instCode:");
            if (this.instCode == null) {
                sb.append("null");
            } else {
                sb.append(this.instCode);
            }
            first = false;
        }
        if (!first) sb.append(", ");
        sb.append("ip:");
        if (this.ip == null) {
            sb.append("null");
        } else {
            sb.append(this.ip);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("dateTime:");
        sb.append(this.dateTime);
        first = false;
        if (!first) sb.append(", ");
        sb.append("data:");
        if (this.data == null) {
            sb.append("null");
        } else {
            sb.append(this.data);
        }
        first = false;
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws TException {
        // check for required fields
        if (proCode == null) {
            throw new TProtocolException("Required field 'proCode' was not present! Struct: " + toString());
        }
        if (appCode == null) {
            throw new TProtocolException("Required field 'appCode' was not present! Struct: " + toString());
        }
        if (ip == null) {
            throw new TProtocolException("Required field 'ip' was not present! Struct: " + toString());
        }
        // alas, we cannot check 'dateTime' because it's a primitive and you chose the non-beans generator.
        if (data == null) {
            throw new TProtocolException("Required field 'data' was not present! Struct: " + toString());
        }
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class LogFilterStatisticStandardSchemeFactory implements SchemeFactory {
        public LogFilterStatisticStandardScheme getScheme() {
            return new LogFilterStatisticStandardScheme();
        }
    }

    private static class LogFilterStatisticStandardScheme extends StandardScheme<LogFilterStatistic> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, LogFilterStatistic struct) throws TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true)
            {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // PRO_CODE
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.proCode = iprot.readString();
                            struct.setProCodeIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // APP_CODE
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.appCode = iprot.readString();
                            struct.setAppCodeIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // INST_CODE
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.instCode = iprot.readString();
                            struct.setInstCodeIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 4: // IP
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.ip = iprot.readString();
                            struct.setIpIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 5: // DATE_TIME
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.dateTime = iprot.readI64();
                            struct.setDateTimeIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 6: // DATA
                        if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                            {
                                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                                struct.data = new HashMap<String,Integer>(2*_map0.size);
                                String _key1;
                                int _val2;
                                for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                                {
                                    _key1 = iprot.readString();
                                    _val2 = iprot.readI32();
                                    struct.data.put(_key1, _val2);
                                }
                                iprot.readMapEnd();
                            }
                            struct.setDataIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            if (!struct.isSetDateTime()) {
                throw new TProtocolException("Required field 'dateTime' was not found in serialized data! Struct: " + toString());
            }
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, LogFilterStatistic struct) throws TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.proCode != null) {
                oprot.writeFieldBegin(PRO_CODE_FIELD_DESC);
                oprot.writeString(struct.proCode);
                oprot.writeFieldEnd();
            }
            if (struct.appCode != null) {
                oprot.writeFieldBegin(APP_CODE_FIELD_DESC);
                oprot.writeString(struct.appCode);
                oprot.writeFieldEnd();
            }
            if (struct.instCode != null) {
                if (struct.isSetInstCode()) {
                    oprot.writeFieldBegin(INST_CODE_FIELD_DESC);
                    oprot.writeString(struct.instCode);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.ip != null) {
                oprot.writeFieldBegin(IP_FIELD_DESC);
                oprot.writeString(struct.ip);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldBegin(DATE_TIME_FIELD_DESC);
            oprot.writeI64(struct.dateTime);
            oprot.writeFieldEnd();
            if (struct.data != null) {
                oprot.writeFieldBegin(DATA_FIELD_DESC);
                {
                    oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, struct.data.size()));
                    for (Map.Entry<String, Integer> _iter4 : struct.data.entrySet())
                    {
                        oprot.writeString(_iter4.getKey());
                        oprot.writeI32(_iter4.getValue());
                    }
                    oprot.writeMapEnd();
                }
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class LogFilterStatisticTupleSchemeFactory implements SchemeFactory {
        public LogFilterStatisticTupleScheme getScheme() {
            return new LogFilterStatisticTupleScheme();
        }
    }

    private static class LogFilterStatisticTupleScheme extends TupleScheme<LogFilterStatistic> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, LogFilterStatistic struct) throws TException {
            TTupleProtocol oprot = (TTupleProtocol) prot;
            oprot.writeString(struct.proCode);
            oprot.writeString(struct.appCode);
            oprot.writeString(struct.ip);
            oprot.writeI64(struct.dateTime);
            {
                oprot.writeI32(struct.data.size());
                for (Map.Entry<String, Integer> _iter5 : struct.data.entrySet())
                {
                    oprot.writeString(_iter5.getKey());
                    oprot.writeI32(_iter5.getValue());
                }
            }
            BitSet optionals = new BitSet();
            if (struct.isSetInstCode()) {
                optionals.set(0);
            }
            oprot.writeBitSet(optionals, 1);
            if (struct.isSetInstCode()) {
                oprot.writeString(struct.instCode);
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, LogFilterStatistic struct) throws TException {
            TTupleProtocol iprot = (TTupleProtocol) prot;
            struct.proCode = iprot.readString();
            struct.setProCodeIsSet(true);
            struct.appCode = iprot.readString();
            struct.setAppCodeIsSet(true);
            struct.ip = iprot.readString();
            struct.setIpIsSet(true);
            struct.dateTime = iprot.readI64();
            struct.setDateTimeIsSet(true);
            {
                org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, iprot.readI32());
                struct.data = new HashMap<String,Integer>(2*_map6.size);
                String _key7;
                int _val8;
                for (int _i9 = 0; _i9 < _map6.size; ++_i9)
                {
                    _key7 = iprot.readString();
                    _val8 = iprot.readI32();
                    struct.data.put(_key7, _val8);
                }
            }
            struct.setDataIsSet(true);
            BitSet incoming = iprot.readBitSet(1);
            if (incoming.get(0)) {
                struct.instCode = iprot.readString();
                struct.setInstCodeIsSet(true);
            }
        }
    }

}

